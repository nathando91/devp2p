export interface MetricsRegister {
    gauge<Labels extends LabelsGeneric = NoLabels>(config: GaugeConfig<Labels>): Gauge<Labels>;
}
type GaugeConfig<Labels extends LabelsGeneric> = {
    name: string;
    help: string;
} & (NoLabels extends Labels ? {
    labelNames?: never;
} : {
    labelNames: [LabelKeys<Labels>, ...LabelKeys<Labels>[]];
});
type NoLabels = Record<string, never>;
type LabelsGeneric = Record<string, string | number>;
type LabelKeys<Labels extends LabelsGeneric> = Extract<keyof Labels, string>;
interface Gauge<Labels extends LabelsGeneric = NoLabels> {
    inc: NoLabels extends Labels ? (value?: number) => void : (labels: Labels, value?: number) => void;
    set: NoLabels extends Labels ? (value: number) => void : (labels: Labels, value: number) => void;
    collect?(): void;
}
export interface IDiscv5Metrics {
    kadTableSize: Gauge;
    activeSessionCount: Gauge;
    connectedPeerCount: Gauge;
    lookupCount: Gauge;
    sentMessageCount: Gauge<{
        type: string;
    }>;
    rcvdMessageCount: Gauge<{
        type: string;
    }>;
    rateLimitHitIP: Gauge;
    rateLimitHitTotal: Gauge;
}
export type Metrics = ReturnType<typeof createDiscv5Metrics>;
/**
 * Discv5 metrics
 */
export declare function createDiscv5Metrics(register: MetricsRegister): {
    /** Total size of the kad table */
    kadTableSize: Gauge<NoLabels>;
    /** Total number of attempted lookups */
    lookupCount: Gauge<NoLabels>;
    /** Total number of active sessions */
    activeSessionCount: Gauge<NoLabels>;
    /** Total number of connected peers */
    connectedPeerCount: Gauge<NoLabels>;
    /** Total number messages sent by message type */
    sentMessageCount: Gauge<{
        type: string;
    }>;
    /** Total number messages received by message type */
    rcvdMessageCount: Gauge<{
        type: string;
    }>;
    /** Total count of rate limit hits by IP */
    rateLimitHitIP: Gauge<NoLabels>;
    /** Total count of rate limit hits by total requests */
    rateLimitHitTotal: Gauge<NoLabels>;
};
export {};
//# sourceMappingURL=metrics.d.ts.map