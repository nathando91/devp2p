import { NodeId } from "@chainsafe/enr";
import { IKeypair } from "../keypair/index.js";
export declare const MAC_LENGTH = 16;
export declare function generateSessionKeys(localId: NodeId, remoteId: NodeId, remotePubkey: IKeypair, challengeData: Uint8Array): [Uint8Array, Uint8Array, Uint8Array];
export declare function deriveKey(secret: Uint8Array, firstId: NodeId, secondId: NodeId, challengeData: Uint8Array): [Uint8Array, Uint8Array];
export declare function deriveKeysFromPubkey(kpriv: IKeypair, localId: NodeId, remoteId: NodeId, ephemPK: Uint8Array, challengeData: Uint8Array): [Uint8Array, Uint8Array];
export declare function idSign(kpriv: IKeypair, challengeData: Uint8Array, ephemPK: Uint8Array, destNodeId: NodeId): Uint8Array;
export declare function idVerify(kpub: IKeypair, challengeData: Uint8Array, remoteEphemPK: Uint8Array, srcNodeId: NodeId, sig: Uint8Array): boolean;
export declare function generateIdSignatureInput(challengeData: Uint8Array, ephemPK: Uint8Array, nodeId: NodeId): Uint8Array;
export declare function decryptMessage(key: Uint8Array, nonce: Uint8Array, data: Uint8Array, aad: Uint8Array): Uint8Array;
export declare function encryptMessage(key: Uint8Array, nonce: Uint8Array, data: Uint8Array, aad: Uint8Array): Uint8Array;
//# sourceMappingURL=crypto.d.ts.map