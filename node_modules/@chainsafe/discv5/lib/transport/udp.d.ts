import { Multiaddr } from "@multiformats/multiaddr";
import { ENR } from "@chainsafe/enr";
import { IPacket } from "../packet/index.js";
import { BindAddrs, IPMode, ITransportService, TransportEventEmitter } from "./types.js";
import { IRateLimiter } from "../rateLimit/index.js";
import { SocketAddress } from "../util/ip.js";
export type UDPTransportServiceInit = {
    bindAddrs: BindAddrs;
    nodeId: string;
    rateLimiter?: IRateLimiter;
};
declare const UDPTransportService_base: new () => TransportEventEmitter;
/**
 * This class is responsible for encoding outgoing Packets and decoding incoming Packets over UDP
 */
export declare class UDPTransportService extends UDPTransportService_base implements ITransportService {
    readonly bindAddrs: Multiaddr[];
    readonly ipMode: IPMode;
    /**
     * IPv4 socket and configuration
     */
    private readonly ip4?;
    /**
     * IPv6 socket and configuration
     */
    private readonly ip6?;
    private readonly srcId;
    private readonly rateLimiter?;
    constructor(init: UDPTransportServiceInit);
    start(): Promise<void>;
    stop(): Promise<void>;
    send(to: Multiaddr, toId: string, packet: IPacket): Promise<void>;
    addExpectedResponse(ipAddress: string): void;
    removeExpectedResponse(ipAddress: string): void;
    getContactableAddr(enr: ENR): SocketAddress | undefined;
    private handleIncoming;
}
export {};
//# sourceMappingURL=udp.d.ts.map