import * as RLP from "@ethereumjs/rlp";
import { ipToBytes } from "../util/ip.js";
import { concatBytes } from "@noble/hashes/utils";
import { MessageType, } from "./types.js";
import { bigintToBytes } from "@chainsafe/enr";
export function encode(message) {
    switch (message.type) {
        case MessageType.PING:
            return encodePingMessage(message);
        case MessageType.PONG:
            return encodePongMessage(message);
        case MessageType.FINDNODE:
            return encodeFindNodeMessage(message);
        case MessageType.NODES:
            return encodeNodesMessage(message);
        case MessageType.TALKREQ:
            return encodeTalkReqMessage(message);
        case MessageType.TALKRESP:
            return encodeTalkRespMessage(message);
        case MessageType.REGTOPIC:
            return encodeRegTopicMessage(message);
        case MessageType.TICKET:
            return encodeTicketMessage(message);
        case MessageType.REGCONFIRMATION:
            return encodeRegConfirmMessage(message);
        case MessageType.TOPICQUERY:
            return encodeTopicQueryMessage(message);
    }
}
export function encodePingMessage(m) {
    return concatBytes(Uint8Array.from([MessageType.PING]), RLP.encode([m.id, bigintToBytes(m.enrSeq)]));
}
export function encodePongMessage(m) {
    if (m.addr.port < 0 || m.addr.port > 65535) {
        throw new Error("invalid port for encoding");
    }
    return concatBytes(Uint8Array.from([MessageType.PONG]), RLP.encode([m.id, bigintToBytes(m.enrSeq), ipToBytes(m.addr.ip), m.addr.port]));
}
export function encodeFindNodeMessage(m) {
    return concatBytes(Uint8Array.from([MessageType.FINDNODE]), RLP.encode([m.id, m.distances]));
}
export function encodeNodesMessage(m) {
    return concatBytes(Uint8Array.from([MessageType.NODES]), RLP.encode([m.id, m.total, m.enrs.map((enr) => enr.encodeToValues())]));
}
export function encodeTalkReqMessage(m) {
    return concatBytes(Uint8Array.from([MessageType.TALKREQ]), RLP.encode([m.id, m.protocol, m.request]));
}
export function encodeTalkRespMessage(m) {
    return concatBytes(Uint8Array.from([MessageType.TALKRESP]), RLP.encode([m.id, m.response]));
}
export function encodeRegTopicMessage(m) {
    return concatBytes(Uint8Array.from([MessageType.REGTOPIC]), RLP.encode([m.id, m.topic, m.enr.encodeToValues(), m.ticket]));
}
export function encodeTicketMessage(m) {
    return concatBytes(Uint8Array.from([MessageType.TICKET]), RLP.encode([m.id, m.ticket, m.waitTime]));
}
export function encodeRegConfirmMessage(m) {
    return concatBytes(Uint8Array.from([MessageType.REGCONFIRMATION]), RLP.encode([m.id, m.topic]));
}
export function encodeTopicQueryMessage(m) {
    return concatBytes(Uint8Array.from([MessageType.TOPICQUERY]), RLP.encode([m.id, m.topic]));
}
//# sourceMappingURL=encode.js.map