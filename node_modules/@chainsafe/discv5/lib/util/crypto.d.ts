export type discv5Crypto = {
    sha256: (data: Uint8Array) => Uint8Array;
    secp256k1: {
        publicKeyVerify: (publicKey: Uint8Array) => boolean;
        publicKeyCreate: (privateKey: Uint8Array) => Uint8Array;
        publicKeyConvert: (publicKey: Uint8Array, compressed: boolean) => Uint8Array;
        sign: (msg: Uint8Array, pk: Uint8Array) => Uint8Array;
        verify: (publicKey: Uint8Array, message: Uint8Array, signature: Uint8Array) => boolean;
        deriveSecret: (privateKey: Uint8Array, publicKey: Uint8Array) => Uint8Array;
        generatePrivateKey: () => Uint8Array;
        privateKeyVerify: (privateKey: Uint8Array) => boolean;
    };
    hkdf: {
        extract: (hash: (data: Uint8Array) => Uint8Array, secret: Uint8Array, info: Uint8Array) => Uint8Array;
        expand: (hash: (data: Uint8Array) => Uint8Array, secret: Uint8Array, info: Uint8Array, outputLen: number) => Uint8Array;
    };
};
export declare const defaultCrypto: discv5Crypto;
export declare const getDiscv5Crypto: () => discv5Crypto;
export declare const setDiscv5Crypto: (c: discv5Crypto) => void;
//# sourceMappingURL=crypto.d.ts.map