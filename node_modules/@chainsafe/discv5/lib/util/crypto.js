import { sha256 } from "@noble/hashes/sha256";
import { hmac } from "@noble/hashes/hmac";
import { expand, extract } from "@noble/hashes/hkdf";
import { sign, verify, ProjectivePoint as Point, getPublicKey, getSharedSecret, utils, etc } from "@noble/secp256k1";
etc.hmacSha256Sync = (k, ...m) => hmac(sha256, k, etc.concatBytes(...m));
export const defaultCrypto = {
    sha256: sha256,
    secp256k1: {
        publicKeyVerify: (pk) => {
            try {
                Point.fromHex(pk).assertValidity();
                return true;
            }
            catch {
                return false;
            }
        },
        publicKeyCreate: (pk) => getPublicKey(pk),
        publicKeyConvert: (pk, compress) => Point.fromHex(pk).toRawBytes(compress),
        sign: (msg, pk) => sign(msg, pk).toCompactRawBytes(),
        verify: (pk, msg, sig) => verify(sig, msg, pk),
        deriveSecret: (privKey, pubKey) => getSharedSecret(privKey, pubKey, true),
        generatePrivateKey: () => utils.randomPrivateKey(),
        privateKeyVerify: (pk) => {
            return utils.isValidPrivateKey(pk);
        },
    },
    hkdf: {
        extract: (hash, secret, info) => extract(hash, secret, info),
        expand: (hash, key, info, outputLen) => expand(hash, key, info, outputLen),
    },
};
let crypto = defaultCrypto;
export const getDiscv5Crypto = () => {
    return crypto;
};
export const setDiscv5Crypto = (c) => {
    crypto = c;
};
//# sourceMappingURL=crypto.js.map