import { KeyType } from "@libp2p/interface";
export interface IKeypair {
    type: KeyType;
    privateKey: Uint8Array;
    publicKey: Uint8Array;
    privateKeyVerify(): boolean;
    publicKeyVerify(): boolean;
    sign(msg: Uint8Array): Uint8Array;
    verify(msg: Uint8Array, sig: Uint8Array): boolean;
    deriveSecret(keypair: IKeypair): Uint8Array;
    hasPrivateKey(): boolean;
}
export interface IKeypairClass {
    new (privateKey?: Uint8Array, publicKey?: Uint8Array): IKeypair;
    generate(): IKeypair;
}
export declare abstract class AbstractKeypair {
    readonly _privateKey?: Uint8Array;
    readonly _publicKey?: Uint8Array;
    constructor(privateKey?: Uint8Array, publicKey?: Uint8Array);
    get privateKey(): Uint8Array;
    get publicKey(): Uint8Array;
    privateKeyVerify(): boolean;
    publicKeyVerify(): boolean;
    hasPrivateKey(): boolean;
}
//# sourceMappingURL=types.d.ts.map